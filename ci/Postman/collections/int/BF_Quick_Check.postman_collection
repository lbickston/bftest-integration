{
	"id": "a0b0f695-952f-52a6-c708-294483576da2",
	"name": "BF_Quick_Check",
	"description": "",
	"order": [
		"6370c132-bfec-c1b7-dc5d-7fcb6e69d361",
		"ad374bc0-8338-e40f-c00f-923de78a6f2a",
		"6b6838f4-9b03-9604-5d05-291bec79aeea",
		"514af5a8-29c2-bcdb-6da6-6b029799612d",
		"ceafef82-f80d-f8f8-a056-5b49bc5a28d9",
		"2d8b3d58-b49f-6db7-8949-5f05941e5665",
		"fd612cd4-a105-769d-0d17-fb50c51251b4",
		"9673ef99-65fa-25c2-657a-4331a4058b76",
		"56385964-45b3-a2b5-e5d9-b45a808d3d36",
		"aad9c04a-da6e-d87d-f45a-23806ef93acb",
		"64d76374-43ce-b538-b65a-b1fc55760917",
		"42b4157c-dfb9-f3a7-947a-3bcac17a77bc",
		"9e54a92c-3f50-95b0-89f4-e97cbccd0730",
		"316559c9-0ab8-d2d7-823d-bd6e694fc18c"
	],
	"folders": [],
	"timestamp": 1485551945823,
	"owner": "699425",
	"public": false,
	"requests": [
		{
			"id": "2d8b3d58-b49f-6db7-8949-5f05941e5665",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/discover/rapideye?PL_API_KEY={{PL API - NO COMMIT}}&maxAcquiredDate={{TwoDaysAgo}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar attempt = parseInt(postman.getEnvironmentVariable('retry_loop'));\n\ntests[\"Try: \" + attempt] = true;\nif (testLevels(tests, data, 'features', 'array')) {\n    if (testLevels(tests, data.features[attempt], 'id', 'skip', 'features[0].')) {\n        postman.setEnvironmentVariable('rapideyeId', data.features[attempt].id);\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485958418803,
			"name": "Discover Rapideye Image",
			"description": "Get a rapideye image from the catalog",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"responses": []
		},
		{
			"id": "316559c9-0ab8-d2d7-823d-bd6e694fc18c",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/by_scene/rapideye:{{rapideyeId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar found = false;\nvar match = true;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n        if (testLevels(tests, data.jobs.features[i], 'properties.scene_id', 'skip', 'jobs.features[].')) {\n            match = match && data.jobs.features[i].properties.scene_id === ('rapideye:' + postman.getEnvironmentVariable('rapideyeId'));\n        }\n    }\n    postman.setEnvironmentVariable('active jobs - scene', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;\ntests[\"All jobs had specified scene_id\"] = match;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1485460861933,
			"name": "List Jobs by Scene",
			"description": "List all jobs filtered by scene ID, making sure the just created job is present.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"rawModeData": ""
		},
		{
			"id": "42b4157c-dfb9-f3a7-947a-3bcac17a77bc",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar found = false;\n\nif (testLevels(tests, data, 'jobs.features', 'array')) {\n    for (i = 0; i < data.jobs.features.length; i++) {\n        if (testLevels(tests, data.jobs.features[i], 'id', 'skip', 'jobs.features[].')) {\n            found = found || data.jobs.features[i].id === postman.getEnvironmentVariable('jobId');\n        }\n    }\n    postman.setEnvironmentVariable('active jobs', data.jobs.features.length);\n}\n\ntests[\"Job found in list of jobs\"] = found;",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1485570538579,
			"name": "List Jobs",
			"description": "List all jobs the user can see, making sure the just created job is present.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"rawModeData": ""
		},
		{
			"id": "514af5a8-29c2-bcdb-6da6-6b029799612d",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-tideprediction.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\ntestLevels(tests, data, 'currentTide', 'number');\ntestLevels(tests, data, 'maximumTide24Hours', 'number');\ntestLevels(tests, data, 'minimumTide24Hours', 'number');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485871973503,
			"name": "Single Point Query",
			"description": "Get the tide at a given point and time.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"responses": [],
			"rawModeData": "{\n\t\"lat\": 33.85,\n\t\"lon\": 151,\n\t\"dtg\": \"2016-05-31-0-1\"\n}"
		},
		{
			"id": "56385964-45b3-a2b5-e5d9-b45a808d3d36",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/rapideye/{{rapideyeId}}?PL_API_KEY={{PL API - NO COMMIT}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar wait = eval(postman.getEnvironmentVariable('wait'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'properties.status')) {\n    if (data.properties.status === 'activating') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Validate Rapideye Activation');\n            wait(60000);\n        }\n        else {\n            tests[\"Activation finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop', \"0\");\n        }\n    }\n    else if (data.properties.status === 'active') {\n        postman.setEnvironmentVariable('retry_loop', \"0\");\n        tests[\"Activation finished in time\"] = true;\n        testLevels(tests, data, 'properties.location', 'string');\n    }\n    else {\n        tests[\"status should not be \" + data.properties.status] = false;\n        postman.setEnvironmentVariable('retry_loop', \"0\");\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485569395869,
			"name": "Validate Rapideye Activation",
			"description": "Check the metadata of a rapideye scene to verify that it was activated.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"responses": []
		},
		{
			"id": "6370c132-bfec-c1b7-dc5d-7fcb6e69d361",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');\nvar d = new Date();\nd.setDate(d.getDate()-2);\nd_string = d.toISOString();\npostman.setEnvironmentVariable('TwoDaysAgo', d.toISOString());\npostman.setEnvironmentVariable('retry_loop', \"0\");\npostman.setEnvironmentVariable('max_retries', 9);\npostman.setEnvironmentVariable('PL Name', 'IntegrationTest_SriLanka');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485959437109,
			"name": "BF-API Health Check",
			"description": "Check that bf-api responds at all.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"rawModeData": ""
		},
		{
			"id": "64d76374-43ce-b538-b65a-b1fc55760917",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 201\"] = responseCode.code === 201;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'job.id')) {\n    postman.setEnvironmentVariable('jobId', data.job.id);\n}\ntestLevels(tests, data, 'job.geometry');\nif (testLevels(tests, data, 'job.properties.created_by')) {\n    tests[\"Correct User\"] = postman.getEnvironmentVariable('bf_user_1') === data.job.properties.created_by;\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1485460236713,
			"name": "Create Job",
			"description": "Start a shoreline calculation job with the selected scene and algorithm.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"rawModeData": "{\n  \"algorithm_id\": \"{{algServiceId}}\",\n  \"scene_id\": \"rapideye:{{rapideyeId}}\",\n  \"name\": \"postman job\",\n  \"planet_api_key\": \"{{PL API - NO COMMIT}}\"\n}"
		},
		{
			"id": "6b6838f4-9b03-9604-5d05-291bec79aeea",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-tideprediction.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485808515383,
			"name": "BF-Tideprediction Health Check",
			"description": "Check that bf-tideprediction responds at all.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "9673ef99-65fa-25c2-657a-4331a4058b76",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/activate/rapideye/{{rapideyeId}}?PL_API_KEY={{PL API - NO COMMIT}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485538056406,
			"name": "Activate Rapideye",
			"description": "Activate the selected rapideye scene.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"responses": []
		},
		{
			"id": "9e54a92c-3f50-95b0-89f4-e97cbccd0730",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/job/{{jobId}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var wait = eval(postman.getEnvironmentVariable('wait'));\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar data = JSON.parse(responseBody);\nif (testLevels(tests, data, 'job.properties.status')) {\n    if (data.job.properties.status === 'Running' || data.job.properties.status === 'Submitted' || data.job.properties.status === 'Pending') {\n        if (postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n            postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n            postman.setNextRequest('Check Job Status');\n            wait(30000);\n        }\n        else {\n            tests[\"Job finished in time\"] = false;\n            postman.setEnvironmentVariable('retry_loop',0);\n        }\n    }\n    else if (data.job.properties.status === 'Success') {\n        postman.setEnvironmentVariable('retry_loop',0);\n        tests[\"Job finished in time\"] = true;\n    }\n    else {\n        tests[\"status should not be \" + data.job.properties.status] = false;\n        postman.setEnvironmentVariable('retry_loop',0);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1485458708136,
			"name": "Check Job Status",
			"description": "Check that the shoreline calculation job was successful.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2"
		},
		{
			"id": "aad9c04a-da6e-d87d-f45a-23806ef93acb",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-api.{{domain}}/v0/algorithm",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar data = JSON.parse(responseBody);\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\n\nif (testLevels(tests, data, 'algorithms', 'array')) {\n    if (testLevels(tests, data.algorithms[0], 'service_id', 'skip', 'algorithms[].')) {\n        postman.setEnvironmentVariable('algServiceId', data.algorithms[0].service_id);\n    }\n}",
			"currentHelper": "basicAuth",
			"helperAttributes": {
				"id": "basic",
				"username": "{{bf_key_1}}",
				"password": "",
				"saveToRequest": true
			},
			"time": 1485567560414,
			"name": "Get Algorithm from List",
			"description": "Get an algoithm from the algorithm list.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"rawModeData": ""
		},
		{
			"id": "ad374bc0-8338-e40f-c00f-923de78a6f2a",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-ia-broker.{{domain}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"globals available\"] = postman.getGlobalVariable('bf_key_1');",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485569111533,
			"name": "BF-IA-Broker Health Check",
			"description": "Check that bf-ia-broker responds at all.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"rawModeData": ""
		},
		{
			"id": "ceafef82-f80d-f8f8-a056-5b49bc5a28d9",
			"headers": "Content-Type: application/json\n",
			"url": "https://bf-tideprediction.{{domain}}/tides",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar testElements = eval(postman.getEnvironmentVariable('testElements'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\n\nif (testLevels(tests, data, 'locations', 'array')) {\n    testElements(testLevels, tests, data.locations, 'results.currentTide', 'number');\n    testElements(testLevels, tests, data.locations, 'results.maximumTide24Hours', 'number');\n    testElements(testLevels, tests, data.locations, 'results.minimumTide24Hours', 'number');\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485871430514,
			"name": "Batch Query",
			"description": "Get the tide at several points and times.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"responses": [],
			"rawModeData": "{\n\t\"locations\": [\n\t\t{\n\t\t\t\"lat\": 25,\n\t\t\t\"lon\": 25,\n\t\t\t\"dtg\": \"2016-05-25-5-25\"\n\t\t},\n\t\t{\n\t\t\t\"lat\": 33.85,\n\t\t\t\"lon\": 151,\n\t\t\t\"dtg\": \"2016-05-31-0-1\"\n\t\t},\n\t\t{\n\t\t\t\"lat\": 67.89,\n\t\t\t\"lon\": 123.45,\n\t\t\t\"dtg\": \"2007-12-3-4-56\"\n\t\t}\n\t]\n}"
		},
		{
			"id": "fd612cd4-a105-769d-0d17-fb50c51251b4",
			"headers": "",
			"url": "https://bf-ia-broker.{{domain}}/planet/rapideye/{{rapideyeId}}?PL_API_KEY={{PL API - NO COMMIT}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar testLevels = eval(postman.getEnvironmentVariable('testLevels'));\nvar parseJSON = eval(postman.getEnvironmentVariable('parseJSON'));\nvar data = parseJSON(tests, responseBody);\nvar match = true;\nvar noTest = {};\n\nif (testLevels(tests, data, 'properties.status')) {\n    if (testLevels(noTest, data, 'properties.permissions', 'array') && _.includes(data.properties.permissions,'download') && data.properties.status === \"inactive\") {\n        // Continue if scene is downloadable & inactive.\n        postman.setEnvironmentVariable('retry_loop', \"0\");\n    } else if(postman.getEnvironmentVariable('retry_loop') < postman.getEnvironmentVariable('max_retries')) {\n        // Otherwise, get another scene.\n        postman.setEnvironmentVariable('retry_loop', parseInt(postman.getEnvironmentVariable('retry_loop')) + 1);\n        postman.setNextRequest('Discover Rapideye Image');\n    } else {\n        // Fial and move on if run out of tries.\n        tests[\"Should find a usable scene\"] = false;\n        postman.setEnvironmentVariable('retry_loop', \"0\");\n        postman.setNextRequest('Discover Planetscope');\n    }\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485889968142,
			"name": "Get Rapideye Metadata",
			"description": "Get the metadata of a single rapideye image.",
			"collectionId": "a0b0f695-952f-52a6-c708-294483576da2",
			"responses": []
		}
	]
}